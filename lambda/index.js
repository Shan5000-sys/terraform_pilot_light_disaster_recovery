const { EC2Client, StartInstancesCommand, waitUntilInstanceRunning } = require("@aws-sdk/client-ec2");
const { GlobalAcceleratorClient, UpdateEndpointGroupCommand } = require("@aws-sdk/client-global-accelerator");
const { SNSClient, PublishCommand } = require("@aws-sdk/client-sns");

const ec2 = new EC2Client({ region: "us-east-1" });
const ga = new GlobalAcceleratorClient({ region: "us-west-2" });
const sns = new SNSClient({ region: "ca-central-1" });

const INSTANCE_ID = process.env.SECONDARY_INSTANCE_ID;
const ENDPOINT_GROUP_ARN = process.env.ENDPOINT_GROUP_ARN;
const SNS_TOPIC_ARN = process.env.SNS_TOPIC_ARN;
const SECONDARY_ELASTIC_IP = process.env.SECONDARY_ELASTIC_IP;

exports.handler = async (event) => {
  try {
    console.log(`üü¢ Starting instance ${INSTANCE_ID}...`);
    await ec2.send(new StartInstancesCommand({ InstanceIds: [INSTANCE_ID] }));

    console.log("‚è≥ Waiting for instance to enter 'running' state...");
    await waitUntilInstanceRunning(
      { client: ec2, maxWaitTime: 60 },
      { InstanceIds: [INSTANCE_ID] }
    );
    console.log("‚úÖ Instance is running.");

    console.log("üîÅ Updating Global Accelerator endpoint weight...");
    await ga.send(new UpdateEndpointGroupCommand({
      EndpointGroupArn: ENDPOINT_GROUP_ARN,
      EndpointConfigurations: [
        {
          EndpointId: INSTANCE_ID,
          Weight: 100
        }
      ]
    }));
    console.log("‚úÖ Global Accelerator weight updated.");

    await sns.send(new PublishCommand({
      TopicArn: SNS_TOPIC_ARN,
      Subject: "üî• DR Failover Executed",
      Message: `Failover triggered. Instance ${INSTANCE_ID} is now active.`,
    }));
    console.log("üì® SNS notification sent.");

    return {
      statusCode: 200,
      body: JSON.stringify({ message: "Success" }),
    };

  } catch (err) {
    console.error("‚ùå Error during failover:", err);

    try {
      await sns.send(new PublishCommand({
        TopicArn: SNS_TOPIC_ARN,
        Subject: "‚ùó DR Failover Failed",
        Message: `Error: ${err.message || JSON.stringify(err)}`,
      }));
      console.log("üì® Failure alert sent.");
    } catch (snsErr) {
      console.error("‚ùå Failed to send failure alert:", snsErr);
    }

    throw err;
  }
};